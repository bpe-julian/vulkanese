// From https://github.com/linebender/piet-gpu/blob/prefix/piet-gpu-hal/examples/shader/prefix.comp
// See https://research.nvidia.com/sites/default/files/pubs/2016-03_Single-pass-Parallel-Prefix/nvr-2016-002.pdf

#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_memory_scope_semantics : enable
// #extension VK_EXT_shader_atomic_float : require NOT WORKING

#define PI 3.1415926

#define INPUT_LENGTH 67108864
#define PROCTYPE float
#define TOTAL_THREAD_COUNT 268435456
#define LG_WG_SIZE 7
#define THREADS_PER_WORKGROUP 128
#define N 16384
#define INTERLEAVE 0
// This will be (or has been) replaced by constant definitions
layout(std430, set = 0, binding = 0) buffer inBuf_buf
{
   readonly float inBuf[1048576];
};
layout(std430, set = 0, binding = 9) buffer Lr0_buf
{
    float Lr0[1048576];
};
layout(std430, set = 0, binding = 10) buffer sumOut_buf
{
   writeonly float sumOut[16384];
};
// This will be (or has been) replaced by buffer definitions
    
layout (local_size_x = THREADS_PER_WORKGROUP, local_size_y = 1, local_size_z = 1 ) in;

// Sum up a N*subgroupSize**2 size buffer into N
void main(){
    
    // subgroupSize is the size of the subgroup â€“ matches the API property
    //gl_SubgroupInvocationID is the ID of the invocation within the subgroup, an integer in the range [0..gl_SubgroupSize).
    // gl_SubgroupID is the ID of the subgroup within the local workgroup, an integer in the range [0..gl_NumSubgroups).
    //gl_NumSubgroups is the number of subgroups within the local workgroup.

    uint workGroup_ix       = gl_WorkGroupID.x;
    uint thread_ix          = gl_LocalInvocationID.x;
    uint workgroupStart_ix  = workGroup_ix*THREADS_PER_WORKGROUP;
    uint uniqueSubgroup_ix  = gl_SubgroupID + gl_NumSubgroups * workGroup_ix;
    uint unique_thread_ix   = uniqueSubgroup_ix*gl_SubgroupSize + gl_SubgroupInvocationID;
    
    float Tr = inBuf[unique_thread_ix];
    
    // first reduction
    float TrSum = subgroupAdd(Tr);
    
    if (subgroupElect()) {
    #if 0
      uint channel           = uniqueSubgroup_ix/SAMPLES_PER_DISPATCH;
      uint sampleInDispatch2 = uniqueSubgroup_ix%SAMPLES_PER_DISPATCH;
      sumOut[sampleInDispatch2*CHANNELS + channel] =
          TrSum;
      //sumOut[uniqueSubgroup_ix] =
      //    TrSum;
    // otherwise, [CHANNEL, SAMPLENO]
    #else
      sumOut[uniqueSubgroup_ix] =
          TrSum;
    #endif
    }
  
    barrier();
    memoryBarrierBuffer();
    
}
