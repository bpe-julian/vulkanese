{
  "outputWidthPixels": 700,
  "outputHeightPixels": 700,
  "pipelines": [
    {
      "class": "raster",
      "culling": "VK_CULL_MODE_BACK_BIT",
      "oversample": "VK_SAMPLE_COUNT_1_BIT",
      "outputClass": "surface",
      "outputWidthPixels": 700,
      "outputHeightPixels": 700,
      "shaders": {
        "vertex":
        {
          "path": "shaders/hello_triangle.vert.template",
          "stage": "VK_SHADER_STAGE_VERTEX_BIT",
          "outputWidthPixels": 700,
          "outputHeightPixels": 700,
          "inBuffers": {
            "POSITION" :
            {
              "name"     : "POSITION",
              "usage"    : "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
              "sharingMode" : "VK_SHARING_MODE_EXCLUSIVE",
              "SIZEBYTES": 65536,
              "format"   : "VK_FORMAT_R32G32B32_SFLOAT",
              "stride"   : 12,
              "binding"  : 0,
              "rate"     : "VK_VERTEX_INPUT_RATE_VERTEX"
            },
            "COLOR":
            {
              "name"     : "COLOR",
              "usage"    : "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
              "sharingMode" : "VK_SHARING_MODE_EXCLUSIVE",
              "SIZEBYTES": 65536,
              "format"   : "VK_FORMAT_R32G32B32_SFLOAT",
              "stride"   : 12,
              "binding"  : 1,
              "rate"     : "VK_VERTEX_INPUT_RATE_VERTEX"
            },
            "INDEX":
            {
              "name"     : "INDEX",
              "usage"    : "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
              "sharingMode" : "VK_SHARING_MODE_EXCLUSIVE",
              "SIZEBYTES": 65536,
              "format"   : "VK_FORMAT_R16_UNORM",
              "stride"   : 2,
              "binding"  : 2,
              "rate"     : "VK_VERTEX_INPUT_RATE_VERTEX"
            }
          },
          "outBuffers": {
            "FRAGCOLOR":
            {
              "name"     : "FRAGCOLOR",
              "usage"    : "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
              "sharingMode" : "VK_SHARING_MODE_EXCLUSIVE",
              "SIZEBYTES": 65536,
              "format"   : "VK_FORMAT_R32G32B32_SFLOAT",
              "stride"   : 12,
              "binding"  : 2,
              "rate"     : "VK_VERTEX_INPUT_RATE_VERTEX"
            }
          },
          "code": [
            "#version 450                                             ",
            "layout(location = LOCATION_POSITION ) in vec3 position;  ",
            "layout(location = LOCATION_COLOR    ) in vec3 color;     ",
            "layout(location = LOCATION_FRAGCOLOR) out vec3 fragColor;",
            "                                                         ",
            "void main() {                                            ",
            "    gl_Position = vec4(position, 1.0);                   ",
            "    fragColor = color;                                   ",
            "}                                                        "
          ]
        },
        "fragment":
        {
          "path": "shaders/hello_triangle.frag.template",
          "stage": "VK_SHADER_STAGE_FRAGMENT_BIT",
          "outputWidthPixels": 700,
          "outputHeightPixels": 700,
          "inBuffers": {
            "FRAGCOLOR":
            {
              "name"     : "FRAGCOLOR"
            }
          },
          "outBuffers": {
            "OUTCOLOR":
            {
              "name"     : "OUTCOLOR",
              "usage"    : "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
              "sharingMode" : "VK_SHARING_MODE_EXCLUSIVE",
              "SIZEBYTES": 65536,
              "format"   : "VK_FORMAT_R32G32B32_SFLOAT",
              "stride"   : 12,
              "rate"     : "VK_VERTEX_INPUT_RATE_VERTEX"
            }
          },
          "code": [
            "#version 450                                             ",
            "#extension GL_ARB_separate_shader_objects : enable       ",
            "                                                         ",
            "layout(location = LOCATION_FRAGCOLOR) in vec3 fragColor; ",
            "                                                         ",
            "//output always location 0                               ",
            "layout(location = 0) out vec4 outColor;                  ",
            "                                                         ",
            "void main() {                                            ",
            "    outColor = vec4(fragColor, 1.0);                     ",
            "}                                                        "
          ]
        }
      }
    }
  ]
}